class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}

    def rate_lecture(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and \
           course in self.courses_in_progress and \
           course in lecturer.courses_attached:
            if course in lecturer.grades:
                lecturer.grades[course].append(grade)
            else:
                lecturer.grades[course] = [grade]
        else:
            return 'Ошибка'

    def _average_grade(self):
        all_grades = [grade for grades in self.grades.values() for grade in grades]
        return sum(all_grades) / len(all_grades) if all_grades else 0.0

    def __str__(self):
        avg_grade = self._average_grade()
        courses_in_progress = ', '.join(self.courses_in_progress) or "Нет"
        finished_courses = ', '.join(self.finished_courses) or "Нет"
        return (
            f"Имя: {self.name}\n"
            f"Фамилия: {self.surname}\n"
            f"Средняя оценка за домашние задания: {avg_grade:.1f}\n"
            f"Курсы в процессе изучения: {courses_in_progress}\n"
            f"Завершенные курсы: {finished_courses}"
        )

    def __lt__(self, other):
        if not isinstance(other, Student):
            return NotImplemented
        return self._average_grade() < other._average_grade()

    def __eq__(self, other):
        if not isinstance(other, Student):
            return NotImplemented
        return self._average_grade() == other._average_grade()


class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []


class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}

    def _average_grade(self):
        all_grades = [grade for grades in self.grades.values() for grade in grades]
        return sum(all_grades) / len(all_grades) if all_grades else 0.0

    def __str__(self):
        avg_grade = self._average_grade()
        return (
            f"Имя: {self.name}\n"
            f"Фамилия: {self.surname}\n"
            f"Средняя оценка за лекции: {avg_grade:.1f}"
        )

    def __lt__(self, other):
        if not isinstance(other, Lecturer):
            return NotImplemented
        return self._average_grade() < other._average_grade()

    def __eq__(self, other):
        if not isinstance(other, Lecturer):
            return NotImplemented
        return self._average_grade() == other._average_grade()


class Reviewer(Mentor):
    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and \
           course in self.courses_attached and \
           course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course].append(grade)
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'

    def __str__(self):
        return f"Имя: {self.name}\nФамилия: {self.surname}"

reviewer1 = Reviewer('Some', 'Buddy')
lecturer1 = Lecturer('Some', 'Buddy')
student1 = Student('Ruoy', 'Eman', 'муж')

student1.courses_in_progress += ['Python', 'Git']
student1.finished_courses += ['Введение в программирование']

student1.grades = {'Python': [10, 9, 10], 'Git': [9, 10]}
lecturer1.grades = {'Python': [10, 9, 10, 10]}

print("Проверяющий:")
print(reviewer1)
print("\nЛектор:")
print(lecturer1)
print("\nСтудент:")
print(student1)

student2 = Student('Jane', 'Doe', 'жен')
student2.grades = {'Python': [8, 7, 9]}

print(f"\n{student1.name} < {student2.name}? → {student1 < student2}")  # False
print(f"{student1.name} > {student2.name}? → {student1 > student2}")    # True

lecturer2 = Lecturer('John', 'Smith')
lecturer2.grades = {'Python': [7, 8, 6]}

print(f"\n{lecturer1.name} < {lecturer2.name}? → {lecturer1 < lecturer2}")  # False
print(f"{lecturer1.name} > {lecturer2.name}? → {lecturer1 > lecturer2}")    # True