class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}

    def rate_lecture(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and \
           course in self.courses_in_progress and \
           course in lecturer.courses_attached:
            if course in lecturer.grades:
                lecturer.grades[course].append(grade)
            else:
                lecturer.grades[course] = [grade]
        else:
            return 'Ошибка'

    def _average_grade(self):
        all_grades = [grade for grades in self.grades.values() for grade in grades]
        return sum(all_grades) / len(all_grades) if all_grades else 0.0

    def __str__(self):
        avg_grade = self._average_grade()
        courses_in_progress = ', '.join(self.courses_in_progress) or "Нет"
        finished_courses = ', '.join(self.finished_courses) or "Нет"
        return (
            f"Имя: {self.name}\n"
            f"Фамилия: {self.surname}\n"
            f"Средняя оценка за домашние задания: {avg_grade:.1f}\n"
            f"Курсы в процессе изучения: {courses_in_progress}\n"
            f"Завершенные курсы: {finished_courses}"
        )

    def __lt__(self, other):
        if not isinstance(other, Student):
            return NotImplemented
        return self._average_grade() < other._average_grade()

    def __eq__(self, other):
        if not isinstance(other, Student):
            return NotImplemented
        return self._average_grade() == other._average_grade()


class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []


class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}  # Оценки от студентов

    def _average_grade(self):
        all_grades = [grade for grades in self.grades.values() for grade in grades]
        return sum(all_grades) / len(all_grades) if all_grades else 0.0

    def __str__(self):
        avg_grade = self._average_grade()
        return (
            f"Имя: {self.name}\n"
            f"Фамилия: {self.surname}\n"
            f"Средняя оценка за лекции: {avg_grade:.1f}"
        )

    def __lt__(self, other):
        if not isinstance(other, Lecturer):
            return NotImplemented
        return self._average_grade() < other._average_grade()

    def __eq__(self, other):
        if not isinstance(other, Lecturer):
            return NotImplemented
        return self._average_grade() == other._average_grade()


class Reviewer(Mentor):
    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and \
           course in self.courses_attached and \
           course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course].append(grade)
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'

    def __str__(self):
        return f"Имя: {self.name}\nФамилия: {self.surname}"


def average_grade_students(students, course):
    all_grades = []
    for student in students:
        if course in student.grades:
            all_grades.extend(student.grades[course])
    if not all_grades:
        return 0.0
    return sum(all_grades) / len(all_grades)


def average_grade_lecturers(lecturers, course):
    all_grades = []
    for lecturer in lecturers:
        if course in lecturer.grades:
            all_grades.extend(lecturer.grades[course])
    if not all_grades:
        return 0.0
    return sum(all_grades) / len(all_grades)


# Студенты
student1 = Student('Ruoy', 'Eman', 'муж')
student1.courses_in_progress += ['Python', 'Git']
student1.finished_courses += ['Введение в программирование']

student2 = Student('Jane', 'Doe', 'жен')
student2.courses_in_progress += ['Python', 'Java']
student2.finished_courses += ['Английский для IT']

# Лекторы
lecturer1 = Lecturer('Some', 'Buddy')
lecturer1.courses_attached += ['Python', 'Git']

lecturer2 = Lecturer('John', 'Smith')
lecturer2.courses_attached += ['Python', 'Java']

# Проверяющие
reviewer1 = Reviewer('Alice', 'Wonder')
reviewer1.courses_attached += ['Python', 'Git']

reviewer2 = Reviewer('Bob', 'Builder')
reviewer2.courses_attached += ['Python', 'Java']

# Reviewer оценивает студентов
reviewer1.rate_hw(student1, 'Python', 10)
reviewer1.rate_hw(student1, 'Python', 9)
reviewer1.rate_hw(student1, 'Git', 8)

reviewer2.rate_hw(student2, 'Python', 7)
reviewer2.rate_hw(student2, 'Java', 9)

# Студенты оценивают лекторов
student1.rate_lecture(lecturer1, 'Python', 10)
student1.rate_lecture(lecturer1, 'Git', 9)

student2.rate_lecture(lecturer2, 'Python', 8)
student2.rate_lecture(lecturer2, 'Java', 7)

# Вывод информации через __str__
print("=== СТУДЕНТЫ ===")
print(student1)
print()
print(student2)

print("\n=== ЛЕКТОРЫ ===")
print(lecturer1)
print()
print(lecturer2)

print("\n=== ПРОВЕРЯЮЩИЕ ===")
print(reviewer1)
print()
print(reviewer2)

# Сравнение студентов и лекторов
print(f"\n=== СРАВНЕНИЕ ===")
print(f"{student1.name} < {student2.name}? → {student1 < student2}")
print(f"{lecturer1.name} > {lecturer2.name}? → {lecturer1 > lecturer2}")

# Подсчет средних оценок

print(f"\n=== СРЕДНИЕ ОЦЕНКИ ПО КУРСАМ ===")
students_list = [student1, student2]
lecturers_list = [lecturer1, lecturer2]

avg_students_python = average_grade_students(students_list, 'Python')
print(f"Средняя оценка студентов по курсу Python: {avg_students_python:.1f}")

avg_lecturers_python = average_grade_lecturers(lecturers_list, 'Python')
print(f"Средняя оценка лекторов по курсу Python: {avg_lecturers_python:.1f}")

avg_students_java = average_grade_students(students_list, 'Java')
print(f"Средняя оценка студентов по курсу Java: {avg_students_java:.1f}")

avg_lecturers_git = average_grade_lecturers(lecturers_list, 'Git')
print(f"Средняя оценка лекторов по курсу Git: {avg_lecturers_git:.1f}")